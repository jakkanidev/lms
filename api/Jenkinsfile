pipeline {
    agent any

    stages {
        stage('Backend Sonar Analysis') {
            steps {
                echo 'Code Analyzing..'
                sh 'cd api && sudo docker run --rm -e SONAR_HOST_URL="http://3.14.144.250:9000" -e SONAR_LOGIN="sqp_04d2ee41b5ef56e17472228407611b06114fbdeb"  -v ".:/usr/src" sonarsource/sonar-scanner-cli -Dsonar.projectKey=lms'
            }
        }
        stage('Check and Create lms-postgres-container') {
            steps {
                script {
                    def postgresContainerExists = sh(script: 'sudo docker ps -a --format "{{.Names}}" | sudo grep -q "lms-postgres-container"', returnStatus: true) == 0

                    if (postgresContainerExists) {
                        echo "lms-postgres-container container already exists, skipping creation"
                    } else {
                        echo "lms-postgres-container container does not exist, creating..."
                        sh 'sudo docker container run -dt --name lms-postgres-container --network lmsnetwork -p 5432:5432 -e POSTGRES_PASSWORD=password postgres'
                    }
                }
            }
        }
		stage('Build and Push Backend Image') {
            steps {
				script {
					echo 'Building..'
					withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
						// Log in to Docker Hub
						sh "sudo docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
						echo 'logged in to dockerhub'

						// Read the version from package.json
						def packageJSON = readJSON file: 'api/package.json'
						def packageJSONVersion = packageJSON.version
						echo "version = ${packageJSONVersion}"

						// Build and push backend image
						sh "cd api && sudo docker build -t santhoshjakkani/lms-backend-image:${packageJSONVersion} ."
						echo 'build successfull !!'
						sh "sudo docker push santhoshjakkani/lms-backend-image:${packageJSONVersion}"
						echo 'lms-backend-image:${packageJSONVersion} pushed to docker hub'

						// Delete the local backend image
						sh "sudo docker rmi santhoshjakkani/lms-backend-image:${packageJSONVersion}"
						echo 'lms-backend-image:${packageJSONVersion} deleted from local'
					}
				}
			}
		}
        stage('Run Backend Container') {
            steps {
                script {
                    // Load Docker Hub credentials
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        // Log in to Docker Hub
                        sh "sudo docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
						echo 'logged in to dockerhub'

						// Read the version from package.json
						def packageJSON = readJSON file: 'api/package.json'
						def packageJSONVersion = packageJSON.version
						echo "version = ${packageJSONVersion}"

                        // Check if the container exists
                        //def containerExists = sh('sudo docker ps -a --format "{{.Names}}" | sudo grep -q "lms-backend-container"', returnStatus: true)
						//def containerExistsOutput = sh(script: 'sudo docker ps -a --format "{{.Names}}" | sudo grep "lms-backend-container"', returnStdout: true, returnStatus: true)
                        //if (containerExistsOutput != null && containerExistsOutput.trim().length() > 0) {
						def containerExists = sh(script: 'sudo docker ps -a --filter name=lms-backend-container --format "{{.Names}}"', returnStdout: true).trim()
                    
						if (containerExists == 'lms-backend-container') {
                            // Container exists, stop and delete it
                            sh 'sudo docker stop lms-backend-container'
                            sh 'sudo docker rm lms-backend-container'
							echo 'lms-backend-container deleted'
                        }

                        // Container doesn't exist, create it
                        sh "sudo docker run -d --name lms-backend-container -p 8080:8080 santhoshjakkani/lms-backend-image:${packageJSONVersion}"
						echo "successfully running santhoshjakkani/lms-backend-image:${packageJSONVersion} container"
                    }
                }
            }
        }		
	}
}